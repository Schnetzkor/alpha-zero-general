1.Phasen: Es gibt 4 Phasen in einem Muehle-Spiel:
    I: Auslegen der Steine
    II: Einen eigenen Stein eliminieren: Extra Zug fuer den Spieler mit anderen Regeln
    III: Einen Stein bewegen (muessen)
    IV: Einen eigenen Stein flexibel bewegen (muessen)

Implementierung des Spielfeldes:
---------
|A--B--C|
|-D-E-F-|
|--GHI--|
|JKL-MNO|
|--PQR--|
|-S-T-U-|
|V--W--Y|
---------

Übergebe den Vektor als:
{A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,Y}

Bessere Idee:
8x3 oder 3x8 Matrix:

<- 0,0 - 0,1 - 0,2 - 0,3 - 0,4 - 0,5 - 0,6 - 0,7 ->
    |           |           |           |
<- 1,0 - 1,1 - 1,2 - 1,3 - 1,4 - 1,5 - 1,6 - 1,7 ->
    |           |           |           |
<- 2,0 - 2,1 - 2,2 - 2,3 - 2,4 - 2,5 - 2,6 - 2,7 ->

=>

Darstellung als eine art Reuse. Wobei ecken durch ungerade und Kannten durch gerade Indizes dargestellt
werden.



Daraus ergibt sich folgendes regelwerk:
Bewegung zwischen den ebenen sind möglich wenn der zweite Index gerade ist.
eine Mühle enthält drei aufeinander folgende Felder von denen entweder einer der letzten indizes oder alle drei der
letzten indizes gerade sind.
=>
Klassische Darstellung

2,7 ------------- 2,0 ------------- 2,1
 |                 |                 |
 |    1,7 ------- 1,0 ------- 1,1    |
 |     |           |           |     |
 |     |    0,7 - 0,0 - 0,1    |     |
 |     |     |           |     |     |
2,6 - 1,6 - 0,6         0,2 - 1,2 - 2,2
 |     |     |           |     |     |
 |     |    0,5 - 0,4 - 0,3    |     |
 |     |           |           |     |
 |    1,5 ------- 1,4 ------- 1,3    |
 |                 |                 |
2,5 ------------- 2,4 ------------- 2,5
Legale Zuege Phase 1:
Iteriere ueber den Vektor, unbelegte Stellen = legal

Legale Zuege Phase 2, Eliminiation:
Iteriere ueber den Vektor, vom Gegner belegte Stellen die nicht in einer Muehle sind = legaler Zug

Legale Zuege Phase 3: Iteriere ueber Vektor, bei eigenen Steinen, wenn eine Nachbarposition frei ist = legaler Zug
Speichere die Nachbarn ab:
A: B,j
B: A,C, E
usw.

Legale Zuege Phase 4: Alle freien Felder sind legale Zuege, Differenzierung der Herkunft? Schachschreibweise ist d4xe5 bzw.

Checken ob eine Muehle vorhanden ist:
Speichere mögliche Kombinationen für jede Position ab:
A: ABC, AJV
B: ABC, BEH
usw.

Wenn Stein auf Position gezogen wird, iteriere ueber die Kombinationen (optimal: minus die, aus der der Stein kommt, dort kann keine Muehle sein)


-------------------------------------------------------------------------------
GUI:
1. Anforderungen: Was soll die GUI koennen?
    I.Das Brett darstellen, also leere Felder und die Verbindungen.
        Leere Felder = Grau, Verbindungen= Schwarz, Hintergrund = Weiss?, Simon fragen
        Wir brauchen Felder, die mit 4 unterschiedlichen Farben gefuellt sein koennen: Leer, Moeglicher Zug, Spielstein
        Dazu Verbindungen zwischen den Feldern, die Schwarz sein sollen.
        Verbindungen erstellen: uebernehmen aus den schleifen fuer legale Zuege.
    II. Steine eindeutig darstellen
         Spieler1=Blau, Spieler2=Gelb
    III. Optional: Legale Zuege darstellen
        Idee: Legale Zuege sind Steine mit Farbe= Gruen
    IV. Updatezeitpunkte: Zug ist committed, Spielerwechsel erfolgt und möglichte Züge vorhanden
        Menschlicher Spieler: Lese den Mausklick auf den gruenen Stein (=möglicher Zug) aus und comitted den Zug.

        Punktdefinitionen zum Zeichnen:
        Gesamtgroeße_Feld = 7*Kreis
        Kreis = Groeße zu definieren                                  /  pygame.draw.circle() : draw a circle
        Balken =  Zentriert auf Mittelpunkt d. entsprechenden Kreise  /  pygame.draw.line() : draw a straight line
        Balken_lang =3*Durchmesser_Kreis
        Balken_mittel = 2*Durchmesser_Kreis
        Balken_klein = 1*Durchmesser_Kreis
        Farbe:
                Hintergrund = Weiß
                Balken = Schwarz
                Leeres Feld = Grau
                Spieler1 = Blau
                Spieler2= Gelb
                Legale Zuege aktiver Spieler = Gruen

        Links oben Kreis zeichnen, dann einen Balken der zentriert ist auf Höhe des Mittelpunktes des Kreises rechts & unten
        Mittleren oberen Kreis zeichnen, dann Balken rechts & unten
        Rechten oberen Kreis zeichnen, dann Balken nach unten
        Kreis rechte Mitte, Balken nach links & unten
        Kreis rechts unten, Balken nach links
        Kreis untere Mitte, Balken nach oben und links
        Kreis unten links, Balken nach oben
        Kreis linke Mitte, Balken nach rechts
        Kreis links mittlere Ebene, Balken nach unten, oben, rechts,
        weiter rotieren in Spinnennetzmuster, wie in Ebene 1

2,7 ------------- 2,0 ------------- 2,1
 |                 |                 |
 |    1,7 ------- 1,0 ------- 1,1    |
 |     |           |           |     |
 |     |    0,7 - 0,0 - 0,1    |     |
 |     |     |           |     |     |
2,6 - 1,6 - 0,6         0,2 - 1,2 - 2,2
 |     |     |           |     |     |
 |     |    0,5 - 0,4 - 0,3    |     |
 |     |           |           |     |
 |    1,5 ------- 1,4 ------- 1,3    |
 |                 |                 |
2,5 ------------- 2,4 ------------- 2,5

1,1 ------------- 1,7 ------------- 1,13
 |                 |                 |
 |    3,3 ------- 3,7 ------- 3,11   |
 |     |           |           |     |
 |     |    5,5 - 5,7 - 5,9    |     |
 |     |     |           |     |     |
7,1 - 7,3 - 7,5         7,9 - 7,11 - 7,13
 |     |     |           |     |     |
 |     |    9,5 - 9,7 - 9,9    |     |
 |     |           |           |     |
 |    11,3------- 11,7-------11,11   |
 |                 |                 |
13,1 -------------13,7-------------13,13


def get_index (coordinate)
    switcher= {
        1: [5,7] = [0,0],
        2: [5,9] = [0,1],
        3: [7,9] = [0,2],
        4: [9,9] = [0,3],
        5: [9,7] = [0,4],
        6: [9,5] = [0,5],
        7: [7,5] = [0,6],
        8: [5,5] = [0,7],
        9: [3,7] = [1,0],
        10: [3,11] = [1,1],
        11: [7,11] = [1,2],
        12: [11,11] = [1,3],
        13: [11,7] = [1,4],
        14: [11,3] = [1,5],
        15: [7,3] = [1,6],
        16: [3,3] = [1,7],
        17: [1,7] = [2,0],
        18: [1,13] = [2,1],
        19: [7,13] = [2,2],
        20: [13,13] = [2,3],
        21: [13,7] = [2,4],
        22: [13,1] = [2,5],
        23: [7,1] = [2,6],
        24: [1,1] = [2,7]
        }
    return index

def get_ui_position (
    switch {
        1: [0,0] = [5,7],
        2: [0,1] = [5,9],
        3: [0,2] = [7,9],
        4: [0,3] = [9,9],
        5: [0,4] = [9,7],
        6: [0,5] = [9,5],
        7: [0,6] = [7,5],
        8: [0,7] = [5,7],
        9: [1,0] = [3,7],
        10: [1,1] = [3,11],
        11: [1,2] = [7,11],
        12: [1,3] = [11,11],
        13: [1,4] = [11,7],
        14: [1,5] = [11,3],
        15: [1,6] = [7,3],
        16: [1,7] = [3,3],
        17: [2,0] = [1,7],
        18: [2,1] = [1,13],
        19: [2,2] = [7,13],
        20: [2,3] = [13,13],
        21: [2,4] = [13,7],
        22: [2,5] = [13,1],
        23: [2,6] = [7,1],
        24: [2,7] = [1,1]
        }
    return coordinate


WHITE = (255 ,255 ,255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
GRAY = (127, 127, 127)
scale = 20

def drawGround
    pygame.draw.rect (screen, WHITE, 0, 14 * scale) ##Hintergrund
    pygame.draw.lines (screen, BLACK, closed (scale * [1,1] scale * [1,13] scale * [13,13], scale*[13,1], width=scale))## 4 Quadrate
    pygame.draw.lines (screen, BLACK, closed (scale * [3,3] scale * [3,11] scale * [11,11], scale*[11,3], width=scale))
    pygame.draw.lines (screen, BLACK, closed (scale * [5,5] scale * [5,9] scale * [9,9], scale*[9,5], width=scale))

    pygame.draw.line (screen, BLACK, (scale * [7,1] scale * [7,5] , width=scale) )## Verbindungen
    pygame.draw.line (screen, BLACK, (scale * [1,7] scale * [5,7] , width=scale))
    pygame.draw.line (screen, BLACK, (scale * [7,13] scale * [7,9] , width=scale))
    pygame.draw.line (screen, BLACK, (scale * [13,7] scale * [9,7] , width=scale))

    for i in range(2)
        for j in range(7)
            pygame.draw.circle (screen, GRAY, (getCoordinate(i,j), scale*0,25,) ##Leerstellen
    pygame.display.update()



if humanplayer=true: showValidMoves

def showValidMoves ()
    moves = get_legal_moves
    for i in range(moves)
        pygame.draw.circle (screen, GREEN, (getCoordinate (i), scale*0,25)) ## Zeichne legale Moves, nur für menschliche Spieler

def updateBoard (Board)
    for i in range(2)
        for j in range (7)
            if Board [i,j] == 1,
                pygame.draw.circle (screen, YELLOW, (getCoordinate (i), scale*0,25))
            if Board [i,j] == -1
                pygame.draw.circle (screen, BLUE, (getCoordinate (i), scale*0,25))
            else
                pygame.draw.circle (screen, GRAY, (getCoordinate (i), scale*0,25))








2. Codefragmente als Start aus spider 4gewinnt:
    Aufrufe am Ende des Codes:
        SQUARESIZE = 100

        width = COLUMN_COUNT * SQUARESIZE  / Wir brauchen Platz fuer die Felder und Verbindungen, zur Erstellung der GUI:Wie Reuse umrechnen in Koordinaten fuer GUI? Oder einfach ignorieren und spiegeln, weil das Brett sowieso symmetirsch ist?
        height = ROW_COUNT * SQUARESIZE     / Dann wäre Column_count = 7*Durchmesser = Row_count, Squaresize = "Zoom"

        size = (width, height)

        RADIUS = int(SQUARESIZE / 2 - 5)  / Mir ist nicht klar wozu das hier ist?

        screen = pygame.display.set_mode(size)
        draw_board(board)
        pygame.display.update()

        myfont = pygame.font.SysFont("monospace", 75) / Standard hier

        col = -1
        row = -1
        valid_locations = initial_valid_locations(board) / hier valid_moves

    draw_board:
        def draw_board(board_):
             for c in range(COLUMN_COUNT):
                  for r in range(ROW_COUNT):
                      pygame.draw.rect(screen, BLUE, (c * SQUARESIZE, r *                   / Hier basisfeld:  .draw.line () fuer Verbindungen der Balken, circle fuer Steine, erst ein rectangle als Hintergrund = weiss, Verbindungen = Schwarz,
                                            SQUARESIZE, SQUARESIZE, SQUARESIZE))            / resizing ist hier einfach nur mit squaresize, das sollte auch möglich sein sobald wir uns auf Balkengröße usw. geeinigt haben.
                      pygame.draw.circle(screen, BLACK, (int(c * SQUARESIZE + SQUARESIZE / 2),
                                               int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)

             for c in range(COLUMN_COUNT):                                                          / Hier die Spieler, kann uebernommen werden, Farbe auswählbar.
                for r in range(ROW_COUNT):
                    if board_[r][c] == 1:
                    pygame.draw.circle(screen, RED, (int(c * SQUARESIZE + SQUARESIZE / 2),
                                                 height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
            elif board_[r][c] == 2:
                pygame.draw.circle(screen, YELLOW, (int(
                    c * SQUARESIZE + SQUARESIZE / 2), height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
    pygame.display.update

_


Eingesetzter Code:pygame.draw.circle()

surface (Surface) -- surface to draw on
color (Color or int or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a tuple (RGB[A])
center (tuple(int or float, int or float) or list(int or float, int or float) or Vector2(int or float, int or float)) -- center point of the circle as a sequence of 2 ints/floats, e.g. (x, y)
radius (int or float) -- radius of the circle, measured from the center parameter, nothing will be drawn if the radius is less than 1
width (int) --


pygame.draw.line() / 16 Linien, zwischen den Extrema

surface (Surface) -- surface to draw on
color (Color or int or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a tuple (RGB[A])
start_pos (tuple(int or float, int or float) or list(int or float, int or float) or Vector2(int or float, int or float)) -- start position of the line, (x, y)
end_pos (tuple(int or float, int or float) or list(int or float, int or float) or Vector2(int or float, int or float)) -- end position of the line, (x, y)
width (int) --

(optional) used for line thickness
if width >= 1, used for line thickness (default is 1)
if width < 1, nothing will be drawn

    draw_board:
        def draw_board
